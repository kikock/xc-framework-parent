# 日志配置文件
log4j.debug=false
#log4j.rootLogger=info,stdout,log,errorlog
#log4j.properties
#指定rootLogger的输出等级，并且输出到appenderName这个目的地，这个名字可以自己随便取
############  info等级 输出到 MyConsole配置和logFile配置######################################
log4j.rootLogger=INFO,MyConsole,log,errors
# Console 输出到控制台
log4j.appender.MyConsole=org.apache.log4j.ConsoleAppender
log4j.appender.MyConsole.Target=System.out
log4j.appender.MyConsole.layout=org.apache.log4j.PatternLayout
log4j.appender.MyConsole.layout.ConversionPattern=%d [%t] %-5p [%c] - %m%n
### Log ### 输出到文件
log4j.appender.log=org.apache.log4j.DailyRollingFileAppender
log4j.appender.log.File=./logs/logs-info.log
log4j.appender.log.Append=true
log4j.appender.log.Threshold=DEBUG
log4j.appender.log.DatePattern='.'yyyy-MM-dd
log4j.appender.log.layout=org.apache.log4j.PatternLayout
log4j.appender.log.layout.ConversionPattern=%-d{yyyy-MM-dd HH:mm:ss} [ %p ] [ %C{1}.java :%L(%M)]  %m%n
### Error ###
log4j.appender.errors=org.apache.log4j.DailyRollingFileAppender
log4j.appender.errors.File=./logs/logs-error.log
log4j.appender.errors.Append=true
log4j.appender.errors.Threshold=ERROR
log4j.appender.errors.DatePattern='.'yyyy-MM-dd
log4j.appender.errors.layout=org.apache.log4j.PatternLayout
log4j.appender.errors.layout.ConversionPattern=%-d{yyyy-MM-dd HH:mm:ss} [ %p ] [ %C{1}.java :%L(%M)] %m%n
#Spring logging configuration
log4j.category.org.springframework=warn
#Druid logging configuration
log4j.logger.druid.sql=warn,MyConsole,log,errors
log4j.logger.druid.sql.DataSource=warn,MyConsole,log,errors
log4j.logger.druid.sql.Connection=warn,MyConsole,log,errors
log4j.logger.druid.sql.Statement=warn,MyConsole,log,errors
log4j.logger.druid.sql.ResultSet=warn,MyConsole,log,errors
#ps:说明
#用来指定输出的类型，还可以指定以下的输出方式：
# 1. org.apache.log4j.ConsoleAppender（控制台），
# 2. org.apache.log4j.FileAppender（文件），
# 3. org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件），
# 4. org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件），
#       可通过log4j.appender.R.MaxFileSize=100KB设置文件大小，
#       还可通过org.apache.log4j.MaxBackupIndex=1设置为保存一个备份文件。
# 5. org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）
# 例:  log4j.appender.stdout=org.apache.log4j.ConsoleAppender
#        定义一个名为stdout的输出目的地，输出方式是第一种 控制台(ConsoleAppender)。
#格式化输出样式
# 1. org.apache.log4j.HTMLLayout（以HTML表格形式布局），
# 2. org.apache.log4j.PatternLayout（可以灵活地指定布局模式），
# 3. org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串），
# 4. org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）
#格式化日志
#Log4J采用类似C语言中的printf函数的打印格式格式化日志信息，打印参数如下：
#       %m 输出代码中指定的消息；
#       %M 输出打印该条日志的方法名；
#       %p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL；
#       %r 输出自应用启动到输出该log信息耗费的毫秒数；
#       %c 输出所属的类目，通常就是所在类的全名；
#       %t 输出产生该日志事件的线程名；
#       %n 输出一个回车换行符，Windows平台为"rn”，Unix平台为"n”；
#       %d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyyy-MM-dd HH:mm:ss,SSS}，输出类似：2002-10-18 22:10:28,921；
#       %l 输出日志事件的发生位置，及在代码中的行数。
